<?php

/**
 * @file
 * Contains shuffle.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Transliteration\PhpTransliteration;

/**
 * The min version of shuffle plugin.
 */
define('SHUFFLE_MIN_PLUGIN_VERSION', '3.1.1');

/**
 * Implements hook_help().
 */
function shuffle_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.shuffle':
      $output = '';
      $output .= '<h3>' . t('About Shuffle') . '</h3>';
      $output .= '<p>' . t('Shuffle module provide a Drupal integration with
        the jquery library Shuffle. This module provide :') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('A views style plugin for displaying rows in a shuffle grid') . '</li>';
      $output .= '<li>' . t('A field formatter for displaying images attached to an entity in a shuffle grid') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t("For more information, see README.txt") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function shuffle_libraries_info() {
  $libraries['shuffle'] = array(
    'name' => 'Shuffle library',
    'vendor url' => 'http://vestride.github.io/Shuffle/',
    'download url' => 'https://github.com/Vestride/Shuffle/archive/v3.1.1.zip',
    'version arguments' => array(
      'file' => 'jquery.shuffle.modernizr.min.js',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 7,
    ),
    'files' => array(
      'js' => array(
        'jquery.shuffle.modernizr.min.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jquery.shuffle.modernizr.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'jquery.shuffle.modernizr.js',
          ),
        ),
      ),
    ),
  );

  $libraries['magnific-popup'] = array(
    'name' => 'Magnific Popup',
    'vendor url' => 'http://dimsemenov.com/plugins/magnific-popup/',
    'download url' => 'https://github.com/dimsemenov/Magnific-Popup/releases/tag/1.0.1',
    'version arguments' => array(
      'file' => 'jquery.magnific-popup.min.js',
      'pattern' => '@Magnific\s+Popup\s+-\s+v?([0-9\.]+)@',
      'lines' => 1,
      'cols' => 30,
    ),
    'files' => array(
      'js' => array(
        'jquery.magnific-popup.min.js',
      ),
      'css' => array(
        'magnific-popup.css',
      ),
    ),

  );

  return $libraries;
}

// @TODO Remove once libraries module provide a way for attaching library.
/**
 * Implements hook_library_info_build().
 */
function shuffle_library_info_build() {
  if (!function_exists('libraries_detect')) {
    module_load_include('module', 'libraries');
  }

  $libraries = [];
  $shuffle = libraries_detect('shuffle');
  $magnific_popup = libraries_detect('magnific-popup');

  if ($shuffle['installed']) {

    $libraries['shuffle_plugin']['dependencies'] = [
      'core/underscore',
      'core/jquery',
      'core/drupal',
      'core/drupalSettings',
      'core/jquery.once',
    ];

    if (isset($shuffle['files']['js'])) {
      $shuffle_path = (isset($shuffle['library path'])) ? $shuffle['library path'] : 'libraries/' . $shuffle['machine name'];
      foreach ($shuffle['files']['js'] as $shuffle_js => $file) {
        $filepath = "/$shuffle_path/$shuffle_js";
        $libraries['shuffle_plugin']['js'][$filepath] = $file;
      }
    }
  }

  if ($magnific_popup['installed']) {

    $libraries['magnific_popup_plugin']['dependencies'] = [
      'core/jquery',
      'core/jquery.once',
    ];

    if (isset($magnific_popup['files']['js'])) {
      $magnific_popup_path = (isset($magnific_popup['library path'])) ? $magnific_popup['library path'] : 'libraries/' . $magnific_popup['machine name'];
      foreach ($magnific_popup['files']['js'] as $magnific_popup_js => $file) {
        $filepath = "/$magnific_popup_path/$magnific_popup_js";
        $libraries['magnific_popup_plugin']['js'][$filepath] = $file;
      }
    }

    if (isset($magnific_popup['files']['css'])) {
      $magnific_popup_path = (isset($magnific_popup['library path'])) ? $magnific_popup['library path'] : 'libraries/' . $magnific_popup['machine name'];
      foreach ($magnific_popup['files']['css'] as $magnific_popup_js => $file) {
        $filepath = "/$magnific_popup_path/$magnific_popup_js";
        $libraries['magnific_popup_plugin']['css']['base'][$filepath] = $file;
      }
    }
  }

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function shuffle_theme() {
  return array(
    'field_shuffle' => array(
      'variables' => array(
        'items' => NULL,
        'settings' => NULL,
        'filter_options' => NULL,
        'view_mode' => NULL,
        'entity' => NULL,
        'wrapper_class' => NULL,
        'field_name' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function shuffle_theme_suggestions_views_view_shuffle_alter(array &$suggestions, array $variables, $hook) {
  $view = $variables['view'];
  $id = $view->storage->id();
  $display = $view->current_display;

  $suggestions[] = 'views_view_shuffle__' . $id;
  $suggestions[] = 'views_view_shuffle__' . $display;
  $suggestions[] = 'views_view_shuffle__' . $id . '__' . $display;

}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function shuffle_theme_suggestions_field_shuffle_alter(array &$suggestions, array $variables, $hook) {
  $field_name = $variables['field_name'];
  $view_mode = $variables['view_mode'];
  $entity = $variables['entity'];
  $entity_type_id = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  $suggestions[] = 'field_shuffle__' . $field_name;
  $suggestions[] = 'field_shuffle__' . $entity_type_id;
  $suggestions[] = 'field_shuffle__' . $entity_type_id . '__' . $bundle;
  $suggestions[] = 'field_shuffle__' . $entity_type_id . '__' . $bundle . '__' . $view_mode;
  $suggestions[] = 'field_shuffle__' . $entity_type_id . '__' . $bundle . '__' . $field_name;
  $suggestions[] = 'field_shuffle__' . $entity_type_id . '__' . $bundle . '__' . $view_mode . '__' . $field_name;

}


/**
 * Prepares variables for views shuffle style templates.
 *
 * Default template: views-view-shuffle.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 */
function template_preprocess_views_view_shuffle(array &$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;
  $shuffle_id = Html::cleanCssIdentifier('views-shuffle-' . $view->storage->id() . '-' . $view->current_display);

  $default_row_class = isset($options['default_row_class']) ? $options['default_row_class'] : FALSE;

  $langcode = \Drupal::config('system.site')->get('langcode');
  $trans = new PhpTransliteration();

  // If filters are set, use the field label to render it
  // as title of selector list.
  $filter = $options['filter'];
  if ($view->field[$filter]->options['label']) {
    $variables['filter_label'] = $view->field[$filter]->options['label'];
  }

  // The filters found in each row.
  $filters = '';
  // The list of all filter found in all rows.
  $filters_list = [];
  // A temporay array for keeping original filter value.
  $tmp = [];

  $count = 0;
  $max = count($rows);
  foreach ($rows as $id => $row) {

    // Prepare filter if enable.
    if ($filter != 'none') {
      if (isset($view->field[$filter])) {

        // At this moment, i can't figure how to retrieve raw value
        // of the field used for filters.
        // Once Issue #2621504 landed, I could use method
        // getFieldValue to retrieve raw value.
        // See https://www.drupal.org/node/2621504
        $filters_name = $style->getField($id, $filter);
        $filters_name = trim(strip_tags($filters_name));

        // Process filters_name only if there is some data.
        if (!empty($filters_name)) {
          $filters_name = explode('|', $filters_name);
          foreach ($filters_name as $key => $filter_name) {
            // Transliterate value for serialize them in a Json object.
            $filters_name[$key] = strtolower(trim($trans->transliterate($filter_name, $langcode)));
            // Keep original value for display them in the select list.
            $tmp[$key] = trim($filter_name);
          }

          // Merge the filters for use them in the selector list.
          $filters_list = array_unique(array_merge($filters_list, $tmp));
          // Encode the field's values to set it as a row attribute.
          $filters = Json::encode($filters_name);
        }
      }
    }

    // Defining classes.
    $classes = array();
    $count++;
    $classes[] = 'shuffle-item';
    if ($default_row_class) {
      $classes[] = 'views-row';
      $classes[] = 'views-row-' . $count;
      $classes[] = 'views-row-' . ($count % 2 ? 'odd' : 'even');
      if ($count == 1) {
        $classes[] = 'views-row-first';
      }
      if ($count == $max) {
        $classes[] = 'views-row-last';
      }
    }

    if ($row_class = $view->style_plugin->getRowClass($id)) {
      $classes[] = $row_class;
    }

    $variables['rows'][$id] = array();
    $variables['rows'][$id]['content'] = $row;

    /** @var \Drupal\Core\Template\Attribute $attributes */
    $attributes = new Attribute();
    $attributes->addClass($classes);

    if ($filters) {
      $attributes->setAttribute('data-groups', $filters);
    }

    $variables['rows'][$id]['attributes'] = $attributes;

  }

  // Prepare the list of options filter.
  $filters_options = [];
  $variables['filter_options'] = [];
  if ($filters_list) {
    foreach ($filters_list as $key => $value) {
      $filters_options[$key]['#markup'] = $value;
      $filters_options[$key]['#wrapper_attributes'] = array(
        'class' => array('shuffle-filters-item'),
        'data-group' => array(strtolower($trans->transliterate($value, $langcode))),
      );
    }

    $variables['filter_options'] = array(
      '#theme' => 'item_list',
      '#items' => $filters_options,
      '#attributes' => array(
        'class' => array(
          'shuffle-filters',
          'filter-options',
          'list-inline',
          'inline',
        ),
      ),
    );

  }

  // The wrapper class is used for initializing each shuffle grid in shuffle.js.
  $wrapper_class = new Attribute();
  $wrapper_class->addClass($shuffle_id);
  $variables['wrapper_class'] = $wrapper_class;

}
